✅ Week 5：模块拆分 + Docker 容器化部署

🎯 目标：将项目初步拆分为多个模块 / 服务，并使用 Docker 实现本地容器化运行环境。
🗓 日常任务分解：
🔹 Day 1：后端模块化（Spring Boot 多模块结构）

将项目拆分为至少两个模块：

    devboard-api（主服务）

    devboard-auth（认证/用户管理服务）

使用 Maven 多模块管理结构（父项目管理依赖）

保持现有功能运行（测试登录、任务接口不出错）

    每个模块保留自己的 application.yml，统一端口配置

🔹 Day 2：配置统一接口响应结构 + 全局异常处理

实现统一返回体格式，如：

{
  "code": 0,
  "message": "success",
  "data": {...}
}

使用 @ControllerAdvice 实现统一异常处理

    处理常见异常（如验证失败、未授权、资源不存在）

🔹 Day 3：Docker 基础部署（MySQL + 后端）

编写 Dockerfile 构建后端 jar 镜像

使用 docker-compose.yml 启动：

    MySQL 数据库容器

    后端 API 服务容器

配置容器间通信，Spring Boot 连接 MySQL 容器

    验证接口可用，前后端仍可联调

🔹 Day 4：前端 Docker 化

为 Vue3 项目添加 Dockerfile

    构建静态文件（使用 npm run build）

    用 nginx 或 http-server 作为容器启动入口

将前端也加入 docker-compose.yml

    验证前端容器启动成功，并能访问后端接口

🔹 Day 5：配置环境变量 + 构建优化

区分开发 / 生产环境配置（端口、数据库地址、token 过期时间等）

Vue 项目中使用 .env.production 管理接口地址

后端支持 application-dev.yml 和 application-prod.yml

    精简前端容器镜像体积（使用 node:alpine）

🔹 Day 6–7：总结 + 部署脚本 + GitHub 更新

编写本地一键启动脚本：docker-compose up --build

添加 .dockerignore，避免上传多余内容

更新 GitHub README：

    添加 Docker 启动方法

    描述模块结构与容器布局

    编写周报 / issue，总结本周学到的内容和部署经验

📦 本周产出清单
模块	功能
后端结构	Maven 多模块管理、模块职责划分
接口结构	统一响应体格式、全局异常处理
Docker 容器化	后端 + MySQL + 前端容器
脚本与部署文档	docker-compose.yml、README 更新
🛠️ 推荐工具 / 学习资料
目的	推荐
多模块结构	Spring Boot official docs + Maven parent pom
统一返回格式/异常	ResponseEntity, @RestControllerAdvice
Docker 化部署	官方文档 + docker-compose 实战
容器间网络通信	docker-compose 默认网络
生产镜像优化	使用多阶段构建（Node 构建 + Nginx 运行）